#!/usr/bin/env python
# Path: scripts/makebuild.py

# type: ignore

import os
import shutil
import sys

import toml
from ninja_syntax import Writer

# check python version
print("Checking for Python 3.10+")
python_executable = sys.executable
if sys.version_info < (3, 10):
    if shutil.which("python3.10"):
        python_executable = shutil.which("python3.10")
    else:
        print("Error: Python 3.10+ not found")
        sys.exit(1)
print("Python 3.10 found at %s" % python_executable)

print()


def get_executable(tool: str, fall_at_error: bool = True) -> str:
    print("[?] Checking for %s" % tool)
    executable = shutil.which(tool)
    if executable is None:
        if fall_at_error:
            print("Error: %s not found" % tool)
            sys.exit(1)
        return
    print("[+] Found %s at %s\n" % (tool, executable))
    return executable


poetry_executable = get_executable("poetry")
ninja_executable = get_executable("ninja")
protoc_executable = get_executable("protoc")


print("[i] Reading project metadata...")
print()
with open("pyproject.toml", "r", encoding="utf-8") as f:
    pyproject = toml.load(f)


print("[i] Generating build.ninja")
ninja_writer = Writer(open("build.ninja", "w", encoding="utf-8"))

ninja_writer.comment("This file is autogenerated by makebuild.py")

ninja_writer.include("project.ninja")


if not os.path.isdir(proto_dir := pyproject["tool"]["redeyes"]["protoc"]["proto-dir"]):
    print("Error: proto-dir not found at %s" % proto_dir)
    sys.exit(1)

if not os.path.isdir(dest_dir := pyproject["tool"]["redeyes"]["protoc"]["dest-dir"]):
    print("Error: dest-dir not found at %s" % dest_dir)
    sys.exit(1)

to_compile: list[str] = []
compiled_targets: list[str] = []

for proto in pyproject["tool"]["redeyes"]["protoc"]["required-protos"]:
    path = os.path.join(proto_dir, proto.replace(".", os.path.sep) + ".proto")
    if not os.path.isfile(path):
        print("Error: proto %s not found at %s" % (proto, path))
        sys.exit(1)
    to_compile.append(path)
    compiled_targets.append(os.path.join(dest_dir, proto.replace(".", "/") + "_pb2.py"))

ninja_writer.variable("py", python_executable)
ninja_writer.variable("protoc", protoc_executable)
ninja_writer.variable("poetry", poetry_executable)

ninja_writer.variable("protoc_args", f"-I{proto_dir} --python_out={dest_dir}")

ninja_writer.variable(
    "isort_args", "--profile black --check-only --diff --skip whiteproto/_proto/**/*"
)
ninja_writer.variable("black_args", "--check --diff")
ninja_writer.variable("flake8_args", "--benchmark --statistics")


ninja_writer.rule("CLEAN", "$py scripts/clean.py")
ninja_writer.rule("ISORT_LINT", "${poetry} run isort ${isort_args} $in")
ninja_writer.rule("BLACK_LINT", "${poetry} run black ${black_args} $in")
ninja_writer.rule("FLAKE_LINT", "${poetry} run flake8 ${flake8_args} $in")
ninja_writer.rule("MYPY_LINT", "${poetry} run mypy $in")


ninja_writer.rule("PROTOC", "${protoc} ${protoc_args} $in")


# ninja_writer.build(["build.ninja", "project.ninja"], "MKBUILD")

ninja_writer.build("clean", "CLEAN")

ninja_writer.build("lint_isort", "ISORT_LINT", inputs=["whiteproto"])
ninja_writer.build("lint_black", "BLACK_LINT", inputs=["whiteproto"])
ninja_writer.build("lint_flake", "FLAKE_LINT", inputs=["whiteproto"])
ninja_writer.build("lint_mypy", "MYPY_LINT", inputs=["whiteproto"])

ninja_writer.build(
    "lint", "phony", inputs=["lint_isort", "lint_black", "lint_flake", "lint_mypy"]
)

ninja_writer.build(
    compiled_targets,
    "PROTOC",
    inputs=to_compile,
)

ninja_writer.build("protos", "phony", inputs=compiled_targets)

ninja_writer.close()

print("[i] Generating project.ninja")
project_writer = Writer(open("project.ninja", "w", encoding="UTF-8"))

project_writer.variable("project_name", pyproject["tool"]["poetry"]["name"])
project_writer.variable("project_version", pyproject["tool"]["poetry"]["version"])

project_writer.close()

print()
print(f"Project generated. Build it with '{ninja_executable} -v'")
